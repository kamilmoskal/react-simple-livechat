{"version":3,"sources":["components/StartScreen.js","actions/authActions.js","components/ChatRooms.js","actions/chatActions.js","components/Message.js","components/ChatScreen.js","components/HomeScreen.js","App.js","serviceWorker.js","reducers/authReducer.js","reducers/chatReducer.js","reducers/rootReducer.js","fbConfig.js","index.js"],"names":["StartScreen","state","tempName","tempId","onChange","e","_this","setState","target","value","logInAnonymous","preventDefault","length","number","Math","random","this","props","logIn","saveTempNameAndId","noNameError","auth","Logged","history","push","react_default","a","createElement","className","onSubmit","type","placeholder","aria-label","aria-describedby","style","display","width","nnError","onClick","Component","connect","dispatch","getState","_ref","getFirebase","signInAnonymously","then","catch","error","data","ChatRooms","nameRoom","passwordRoom","showInputPassword","Object","defineProperty","id","addRoom","checked","_this$props","chatArray","changeOpenChat","openChat","Fragment","map","room","cursor","background","concat","password","key","float","action","htmlFor","_ref2","getFirestore","collection","doc","set","messages","Message","message","messageEmpty","sendMessage","classList","contains","openChatData","tempData","openChatPassword","chat","enteredPassword","firestore","update","FieldValue","arrayUnion","createdAt","Date","ChatScreen","wrongPassword","chatscreen","document","getElementById","scrollTop","scrollHeight","screen","fontSize","moment","toDate","calendar","borderRadius","position","top","left","transform","height","overflow","HomeScreen","name","_this2","components_ChatRooms","logOut","components_ChatScreen","components_Message","compose","ordered","user","firebase","currentUser","delete","firestoreConnect","App","BrowserRouter","basename","process","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","initState","authReducer","arguments","undefined","console","log","objectSpread","chatReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","settings","timestampsInSnapshots","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","reactReduxFirebase","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.797e0a8e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { logIn } from '../actions/authActions'\r\nimport { connect } from 'react-redux'\r\n\r\nclass StartScreen extends Component {\r\n  state = {\r\n    tempName: \"\", tempId: \"\"\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({\r\n      tempName: e.target.value\r\n    })\r\n  }\r\n  logInAnonymous = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.tempName.length > 0){\r\n      let number = Math.random()*10;\r\n      this.setState({\r\n        tempId: number\r\n      }, function(){\r\n        this.props.logIn()\r\n        this.props.saveTempNameAndId(this.state)\r\n      })\r\n    } else {\r\n      this.props.noNameError()\r\n    }\r\n  } \r\n  render() { \r\n    const { auth } = this.props;\r\n    if (auth.Logged){\r\n      this.props.history.push('./home')\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n          <div className=\"card col-sm-12 col-md-6 offset-md-3 col-lg-4 offset-lg-4 text-center mt-5\">\r\n            <div className=\"card-body\">\r\n                <h2 className=\"card-title\">Welcome to LiveChat</h2>\r\n                <form onSubmit={this.logInAnonymous}>\r\n                  <input type=\"text\" className=\"form-control-md p-2 mb-3 mx-auto\" placeholder=\"Nickname\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" style={{display: \"block\", width:\"100%\"}} onChange={this.onChange}/>\r\n\r\n                  { auth.nnError ? <p className=\"text-danger\">You must write temporary name</p> : null}\r\n\r\n                  <button type=\"button\" className=\"btn btn-dark\" style={{width: \"100%\"}} onClick={this.logInAnonymous}>Enter to chat</button>\r\n                </form>\r\n            </div>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      auth: state.auth\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      logIn: () => dispatch(logIn()),\r\n      saveTempNameAndId: (data) => { dispatch({ type: 'SAVE_TEMP_NAME_AND_ID', data })},\r\n      noNameError: () => { dispatch({ type: 'NO_NAME_ERROR' })}\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(StartScreen)\r\n","export const logIn = () => {\r\n    return (dispatch, getState, { getFirebase }) => {\r\n        const firebase = getFirebase();\r\n\r\n        firebase.auth().signInAnonymously()\r\n        .then(() => {\r\n                dispatch({ type: 'LOGIN_SUCCESS' })\r\n        }).catch(error => {\r\n            dispatch({ type: 'LOGIN_ERROR', error })\r\n        })\r\n    }\r\n}\r\n\r\nexport const logOut = () => {\r\n    return (dispatch, getState, { getFirebase }) => {\r\n        const firebase = getFirebase();\r\n        \r\n        firebase.auth().currentUser.delete()\r\n        .then(() => {\r\n            dispatch({ type: 'LOGOUT_SUCCESS' })\r\n        }).catch(error => {\r\n            dispatch({ type: 'LOGOUT_ERROR', error })\r\n        })\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addRoom } from '../actions/chatActions'\r\n\r\nclass ChatRooms extends Component {\r\n    state = {\r\n        nameRoom: \"\", passwordRoom: \"\", showInputPassword: false\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    addRoom = (e) => {\r\n        e.preventDefault()\r\n        if (this.state.nameRoom.length > 0){\r\n            this.props.addRoom(this.state)\r\n            this.setState({\r\n                nameRoom: '',\r\n                passwordRoom: '',\r\n            })\r\n        }\r\n    }\r\n    showInputPassword = (e) => {\r\n        if (e.target.checked){\r\n        this.setState({\r\n            showInputPassword: true\r\n        })} else {\r\n            this.setState({\r\n                showInputPassword: false,\r\n                passwordRoom: \"\"\r\n            })\r\n        }\r\n    }\r\n  render() {\r\n      const { chatArray, changeOpenChat, openChat } = this.props\r\n      \r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    Rooms:\r\n                </div>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    {chatArray && chatArray.map(room => {\r\n                        return (\r\n                            <li style={{cursor: \"pointer\", background: `${openChat === room.id ? \"#efef\" : \"none\" }`}} onClick={() => {changeOpenChat(room.id, room.password)}}className=\"list-group-item\" key={room.id}>{room.id} {room.password.length > 0 ? <i className=\"fas fa-lock\" style={{float:\"right\"}}></i> : null}</li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            <form action=\"\" className=\"my-3\" onSubmit={this.addRoom}>\r\n\r\n                <input type=\"text\" className=\"form-control-md p-2 my-1 mx-auto\" placeholder=\"Room name\" style={{display: \"block\", width:\"100%\"}} onChange={this.onChange} id=\"nameRoom\" value={this.state.nameRoom}/>\r\n\r\n                { this.state.showInputPassword ? <input type=\"text\" className=\"form-control-md p-2 my-1 mx-auto\" placeholder=\"Room password\" style={{display: \"block\", width:\"100%\"}} onChange={this.onChange} id=\"passwordRoom\" value={this.state.passwordRoom}/> : null}\r\n\r\n                <div className=\"form-group form-check\">\r\n                    <input type=\"checkbox\" className=\"form-check-input\" id=\"setPassword\" onClick={this.showInputPassword}/>\r\n                    <label className=\"form-check-label\" htmlFor=\"setPassword\">Set Password</label>\r\n                </div>\r\n\r\n                <button type=\"button\" className=\"btn btn-dark\" style={{width: \"100%\"}} onClick={this.addRoom}>Add room</button>\r\n            </form>\r\n        </React.Fragment>\r\n    )\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addRoom: (data) => dispatch(addRoom(data))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(ChatRooms)\r\n","export const sendMessage = (data) => {\r\n    return (dispatch, getState, { getFirebase, getFirestore }) => {\r\n        const firestore = getFirestore();\r\n\r\n        firestore.collection('chat').doc(`${data.room}`).update({\r\n           \r\n            messages: firestore.FieldValue.arrayUnion({ \r\n                message: data.message,\r\n                tempName: data.tempName,\r\n                tempId:  data.tempId,\r\n                id: data.id,\r\n                createdAt: new Date(),\r\n            })\r\n\r\n        }).then(() => {\r\n            dispatch({ type: 'MESSAGE_SUCCESS_SEND' })\r\n        }).catch(error => {\r\n            dispatch({ type: 'MESSAGE_ERROR_SEND', error })\r\n        })\r\n    }\r\n}\r\n\r\nexport const addRoom = (data) => {\r\n    return (dispatch, getState, { getFirebase, getFirestore }) => {\r\n        const firestore = getFirestore();\r\n\r\n        firestore.collection('chat').doc(`${data.nameRoom}`).set({\r\n            messages: [],\r\n            password: data.passwordRoom\r\n        }).then(() => {\r\n            dispatch({ type: 'ROOM_SUCCESS_ADD' })\r\n        }).catch(error => {\r\n            dispatch({ type: 'ROOM_ERROR_ADD', error })\r\n        })\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { sendMessage } from '../actions/chatActions'\r\n\r\nclass Message extends Component {\r\n  state = {\r\n    message: \"\", tempName: \"\", tempId: \"\", id: \"\", room: \"\", messageEmpty: false\r\n  }\r\n  componentDidMount(){\r\n    this.setState({\r\n      tempName: this.props.tempData.tempName,\r\n      tempId: this.props.tempData.tempId,\r\n    })\r\n  }\r\n  onChange = (e) => {\r\n    this.setState({\r\n      message: e.target.value\r\n    })\r\n  }\r\n  sendMessage = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.message.length > 0 && e.target.classList.contains('active')){\r\n      let number = Math.random()*10;\r\n      this.setState({\r\n        room: this.props.openChatData.openChat,\r\n        id: number\r\n      }, function(){\r\n        this.props.sendMessage(this.state)\r\n        this.setState({\r\n          message: ''\r\n        })\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const { openChatData, password} = this.props\r\n    return (\r\n     <div className=\"text-center mt-2\">\r\n       <form onSubmit={this.sendMessage} className=\"active\">\r\n          <input onChange={this.onChange} type=\"text\" className=\"form-control-md p-2 mb-3 mx-auto\" placeholder=\"Message\" style={{width: \"75%\"}} value={this.state.message}/>\r\n\r\n          <button onClick={this.sendMessage} type=\"button\" className={`btn btn-dark \r\n          ${openChatData.openChatPassword === password || openChatData.openChatPassword.length === 0 \r\n          ? 'active' : 'disabled' }`} style={{width: \"25%\"}}>Send</button>\r\n       </form>\r\n       { this.state.messageEmpty ? <p className=\"text-danger\">You can't send empty message</p> : null}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    password: state.chat.enteredPassword\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (data) => dispatch(sendMessage(data))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Message)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport moment from 'moment'\r\n\r\nclass ChatScreen extends Component {\r\n  state = {\r\n      enteredPassword: \"\", wrongPassword: false\r\n  }\r\n  onChange = (e) => {\r\n    this.setState({\r\n      enteredPassword: e.target.value\r\n    })\r\n  }\r\n  enteredPassword = (e) => {\r\n    e.preventDefault()\r\n    if (this.state.enteredPassword.length > 0) {\r\n      this.props.enteredPassword(this.state.enteredPassword)\r\n      this.setState({\r\n        enteredPassword: \"\"\r\n      })\r\n    }\r\n  }\r\n  componentDidUpdate() {\r\n    const chatscreen = document.getElementById(\"chatscreen\");\r\n    chatscreen.scrollTop = chatscreen.scrollHeight;\r\n  }\r\n  render() {\r\n    const { chat, openChat, password, auth } = this.props\r\n\r\n    const screen = (chat && chat[`${openChat}`].password.length === 0) || (chat && chat[`${openChat}`].password === password) ? (\r\n      chat[`${openChat}`].messages.map(message => { \r\n        return (\r\n          <div className={`list-group-item px-5 ${message.tempId === auth.tempId ? \r\n          'text-right bg-light' : 'text-left'}`} key={message.id}>\r\n\r\n          <span className=\"text-secondary\" style={{fontSize: \"11px\"}}>{moment(message.createdAt.toDate()).calendar()} - {message.tempName} </span>\r\n          <br/>\r\n          <span className=\"py-2\" style={{borderRadius: \"14px\"}}>{message.message}</span>\r\n        </div>\r\n        )\r\n    })\r\n    ) : (\r\n      <form action=\"\" className=\"text-center\" onSubmit={this.enteredPassword} style={{position: \"absolute\",top:\"50%\", left:\"50%\",transform:\"translate(-50%,-50%)\", width: \"100%\"}}>\r\n        \r\n          <input type=\"text\" className=\"form-control-md p-2 my-1 mx-auto\" placeholder=\"password\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" style={{display: \"block\", width:\"200px\"}} onChange={this.onChange} value={this.state.enteredPassword}/>\r\n\r\n          <button type=\"button\" className=\"btn btn-dark mt-2\" style={{width: \"200px\"}} onClick={this.enteredPassword}>Enter password</button>\r\n\r\n          {this.state.wrongPassword ? <p className=\"text-danger\">Wrong password</p> : null}\r\n      </form>\r\n    )\r\n    return (\r\n      \r\n      <div className=\"card\" style={{height: \"400px\", overflow: \"auto\"}} id=\"chatscreen\">\r\n          {screen}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    password: state.chat.enteredPassword,\r\n    auth: state.auth\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      enteredPassword: (password) => { dispatch({ type: 'ENTERED_PASSWORD', password })}\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatScreen)\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport ChatRooms from './ChatRooms';\r\nimport Message from './Message';\r\nimport ChatScreen from './ChatScreen'\r\nimport { connect } from 'react-redux'\r\nimport { firestoreConnect } from 'react-redux-firebase'\r\nimport { compose } from 'redux'\r\nimport { logOut } from '../actions/authActions'\r\n\r\nclass HomeScreen extends Component {\r\n    state = {\r\n        openChat: \"room1\", openChatPassword: \"\"\r\n    }\r\n    changeOpenChat = (name, password) => {\r\n        this.setState({\r\n            openChat: name,\r\n            openChatPassword: password\r\n        })\r\n    }\r\n  render() { \r\n    const { auth, chat, chatArray } = this.props\r\n    if (!auth.Logged) {\r\n        this.props.history.push('./')\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"mt-3 col-lg-4 order-lg-1 order-sm-2 order-2\">\r\n                    <ChatRooms chatArray={chatArray} changeOpenChat={this.changeOpenChat} openChat={this.state.openChat}/>\r\n\r\n                    <button className=\"btn btn-dark\" onClick={() => {this.props.logOut()}} style={{width: \"100%\"}}>LOGOUT</button>\r\n                </div>\r\n                <div className=\"mt-3 col-lg-8 order-lg-2 order-sm-1 order-1\">\r\n                    <ChatScreen chat={chat} openChat={this.state.openChat}/>\r\n                    <Message tempData={auth} openChatData={this.state}/>\r\n                </div>\r\n            </div>\r\n          \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.auth,\r\n        chat: state.firestore.data.chat,\r\n        chatArray: state.firestore.ordered.chat,\r\n        user: state.firebase.auth\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        logOut: () => dispatch(logOut())\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    firestoreConnect([\r\n      { collection: 'chat' }\r\n    ])\r\n  )(HomeScreen)\r\n","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport StartScreen from './components/StartScreen';\nimport HomeScreen from './components/HomeScreen';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path='/' component={StartScreen} />\n            <Route path='/home' component={HomeScreen} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n    Logged: false, tempName: \"\", tempId: \"\", nnError: false\r\n}\r\n\r\nconst authReducer = (state = initState, action) => {\r\n    switch (action.type){\r\n        case 'SAVE_TEMP_NAME_AND_ID':\r\n            console.log('temporary named and id saved');\r\n            return {\r\n                ...state,\r\n                tempName: action.data.tempName,\r\n                tempId: action.data.tempId,\r\n                nnError: false\r\n            }\r\n        case 'LOGIN_SUCCESS':\r\n            console.log('login anonymous success');\r\n            return {\r\n                ...state,\r\n                Logged: true\r\n            }\r\n        case 'LOGIN_ERROR':\r\n            console.log('login error');\r\n            return state;  \r\n        case 'LOGOUT_SUCCESS':\r\n            console.log('logout success');\r\n            return {\r\n                ...state,\r\n                Logged: false\r\n            } \r\n        case 'LOGOUT_ERROR':\r\n            console.log('logout error');\r\n            return state; \r\n        case 'NO_NAME_ERROR':\r\n            console.log('no name error');\r\n            return {\r\n                ...state,\r\n                nnError: true\r\n            } \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default authReducer","const initState = {\r\n    enteredPassword: \"\"\r\n}\r\n\r\nconst chatReducer = (state = initState, action) => {\r\n    switch (action.type){\r\n        case 'MESSAGE_SUCCESS_SEND':\r\n            console.log('message send');\r\n            return state;\r\n        case 'MESSAGE_ERROR_SEND':\r\n            console.log('message error send');\r\n            return state;\r\n        case 'ROOM_SUCCESS_ADD':\r\n            console.log('room added');\r\n            return state;\r\n        case 'ROOM_ERROR_ADD':\r\n            console.log('room added error');\r\n            return state;\r\n        case 'ENTERED_PASSWORD':\r\n            console.log('password entered');\r\n            return {\r\n                ...state,\r\n                enteredPassword: action.password\r\n            }\r\n        default:\r\n            return state  \r\n        }\r\n}\r\n\r\nexport default chatReducer","import authReducer from './authReducer'\r\nimport chatReducer from './chatReducer'\r\nimport { combineReducers } from 'redux';\r\n///redux-firestore\r\nimport { firestoreReducer } from 'redux-firestore'\r\n///firebase do auth\r\nimport { firebaseReducer } from 'react-redux-firebase'\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    chat: chatReducer,\r\n    firestore: firestoreReducer,\r\n    firebase: firebaseReducer\r\n});\r\n\r\nexport default rootReducer","import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\n // Initialize Firebase\r\n var config = {\r\n    apiKey: \"AIzaSyB8Trf_Fl56PMKAlCiKrsABxF2ouE48W8I\",\r\n    authDomain: \"chat-app-9d72d.firebaseapp.com\",\r\n    databaseURL: \"https://chat-app-9d72d.firebaseio.com\",\r\n    projectId: \"chat-app-9d72d\",\r\n    storageBucket: \"chat-app-9d72d.appspot.com\",\r\n    messagingSenderId: \"882969008404\"\r\n  };\r\n  firebase.initializeApp(config);\r\n\r\n  firebase.firestore().settings({ timestampsInSnapshots: true})\r\n  export default firebase\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from './reducers/rootReducer'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\n\nimport { reduxFirestore, getFirestore } from 'redux-firestore'\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase'\nimport fbConfig from './fbConfig'\n\nconst store = createStore(rootReducer, \n    compose(\n        applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n        reduxFirestore(fbConfig),\n        reactReduxFirebase(fbConfig)\n    )\n);\n    \n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}